{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/11/14/hello-world/"},{"title":"python学习笔记","text":"1 数据类型1.1 数据类型转换 转换为整型 1234int('666')# 布尔值转换整型int(True) #等于1int(False) #等于0 转换为字符串 1str(365) 转换为布尔类型 123456789bool(1) #Truebool(0) #Falsebool(-10) #True# 字符串转布尔bool(&quot;666&quot;) #Truebool(&quot;good&quot;) #Truebool(&quot;false&quot;) #Truebool(&quot;&quot;) #False 2 字符串格式化2.1 %123456name = &quot;Jack&quot;age = 18text = &quot;I am %s.&quot; %nametext2 = &quot;I am %s, and I am %d years old.&quot; %(name,age) # %d整型text3 = &quot;I am %(name)s.&quot; %{&quot;name&quot;:&quot;Jack&quot;} 2.1.1 百分比1text = &quot;%s is 99%% right.&quot; %&quot;Mary&quot; 2.2 format1text = &quot;I am {n0}, and I am {n1} years old.&quot;.format(n0 = &quot;Jack&quot;,n1 = 18) 2.3 f12345name = &quot;Jack&quot;text = f&quot;I am {name}.&quot;# 进制转换text2 = f&quot;I am {18:#b} years old.&quot; # #b转换为二进制 #o八进制 #x十六进制","link":"/2021/11/16/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"title":"bedtools提取基因上游启动子区域序列","text":"bed文件介绍 BED文件(Browser Extensible Data)格式是ucsc 的genome browser的一个格式 ,提供了一种灵活的方式来定义的数据行，以用来描述注释信息。BED行有3个必须的列和9个额外可选的列。 必须的列： chrom：染色体编号。 chromStart：feature在染色体上起始位置。需要注意的是，bed文件是从0开始编码的，即最开始的碱基编号是0，而gff文件则是1。 chromEnd：feature在染色体上的终止位置。 可选的列： name：feature的名称。 score：得分，在0~1000之间。 strand：定义链的方向，‘+’或‘-’。 thickStart：绘制feature的起始位置。 thickEnd：绘制feature的结束位置。 itemRgb：是一个RGB值的形式, R, G, B (eg. 255, 0,0), 如果itemRgb设置为‘On’, 这个RBG值将决定数据的显示的颜色。 blockCount：BED行中的block数目，也就是外显子数目。 blockSize：用逗号分割的外显子的大小, 这个item的数目对应于BlockCount的数目。 blockStarts：用逗号分割的列表, 所有外显子的起始位置，数目也与blockCount数目对应。 bedtools的安装 利用conda安装(推荐)：1conda install -c bioconda bedtools 通过源码安装：123456wget https://github.com/arq5x/bedtools2/releases/download/v2.30.0/bedtools-2.30.0.tar.gztar -xzvf bedtools-2.30.0.tar.gzcd bedtools2/makecd binexport PATH=$PWD:$PATH bedtools提取序列 gff文件转换为bed格式12grep -w gene Osativa_323_v7.0.gene_exons.gff3 &gt; gene.gff3convert2bed --input=gff --output=bed &lt;genes.gff &gt;genes.bed #需要提前安装bedops 计算染色体长度12samtools faidx Osativa_323_v7.0.fa cut -f 1,2 Osativa_323_v7.0.fa.fai &gt; ChrLen.txt 创建基因上游2kb启动子序列的位置bed文件1bedtools flank -s -i gene.bed -g ChrLen.txt -l 2000 -r 0 &gt; gene_up_2k.bed 提取基因上游2kb启动子序列1bedtools getfasta -s -fi Osativa_323_v7.0.fa -bed gene_up_2k.bed -fo gene_up_2k.fa -name 参考资源http://www.biotrainee.com/thread-2707-1-1.htmlhttps://www.jianshu.com/p/acb2bcb49882","link":"/2021/11/21/bedtools%E6%8F%90%E5%8F%96%E4%B8%8A%E6%B8%B8%E5%BA%8F%E5%88%97/"},{"title":"去除fasta文件序列内部的换行符","text":"有些不标准的fasta文件中序列内部会存在换行符，会影响一些软件对其分析，需要把这些换行符去掉。 例如，有这样一个序列文件： 123456789101112&gt;LOX-3MLGGLKDKLTGKNGNKIKGLAVLMSRKLLDPRDFTASLLDNVHEVFGNSITCQLVSATVADQNNEGRGIVGSEANLEQGLTDLPSVSQGESKLTVRFNWEMDKHGVPGAIIIKNHHSTKFFLKTITLHDVPGCDTIVFVANSWIYPVGKYHYNRIFFANISYPPSQMPEALRPYREDELRYLRGEDRQGPYQEHDRIYRYDVYNDLGEPDRDNPRPVLGGSQKHPYPRRGRTGRIPTKKDPNSESRLSLLEQIY&gt;AOCMAAAAPSRVSVRAAAPGQTGGFAKIRPQVVVAAAARSAGVSGRRARSVRASLFSPKPATPKDARPAKVQEMFVYEINERDRESPAYLRLSAKQTENALGDLVPFTNKLYSGSLDKRLGISAGICILIQHVPERNGDRYEAIYSFYFGDYGHISVQGPYLTYEESYLAVTGGSGVFEGAYGQVKLNQIVFPFKIFYTFYLKGIPDLPRELLCTPVPPSPTVEPTPAAKATEPHACLNNFTN 可以使用awk实现这一功能。 1awk '!/^&gt;/ { printf &quot;%s&quot;, $0; n = &quot;\\n&quot; }/^&gt;/ { print n $0; n = &quot;&quot; }END { printf &quot;%s&quot;, n }' test.fa &gt; output.fa 查看输出文件，序列内部的换行符已删除： 12345less -S output.fa&gt;LOX-3MLGGLKDKLTGKNGNKIKGLAVLMSRKLLDPRDFTASLLDNVHEVFGNSITCQLVSATVADQNNEGRGIVGSEANLEQGLTDLPSVSQGESKLTVRFNWEMDKHGVPGAIIIKNHHSTKFFLKTITLHDVPGCDTIVFVANSWIYPVGKYHYNRIFFANISYPPSQMPEALRPYREDELRYLRGEDRQGPYQEHDRIYRYDVYNDLGEPDRDNPRPVLGGSQKHPYPRRGRTGRIPTKKDPNSESRLSLLEQIY&gt;AOCMAAAAPSRVSVRAAAPGQTGGFAKIRPQVVVAAAARSAGVSGRRARSVRASLFSPKPATPKDARPAKVQEMFVYEINERDRESPAYLRLSAKQTENALGDLVPFTNKLYSGSLDKRLGISAGICILIQHVPERNGDRYEAIYSFYFGDYGHISVQGPYLTYEESYLAVTGGSGVFEGAYGQVKLNQIVFPFKIFYTFYLKGIPDLPRELLCTPVPPSPTVEPTPAAKATEPHACLNNFTN 参考资源：https://stackoverflow.com/questions/15857088/remove-line-breaks-in-a-fasta-file","link":"/2021/12/05/fasta%E5%8E%BB%E6%8D%A2%E8%A1%8C%E7%AC%A6/"},{"title":"Go学习笔记01-变量的声明","text":"Go语言中的变量需要声明后才能使用，并且变量声明后必须使用。 声明变量的基本语法1var 变量名 变量类型 例如： 1234567package mainfunc main(){ var name string var age int var male bool} 变量的批量声明 使用var，把要声明的变量写在一个()内。 例如： 123456789package mainfunc main(){ var ( name string age int male bool )} 变量的赋值 在Go语言中，声明变量时会自动对变量对应的内存区域进行初始化操作，每个变量会被初始化成其类型的默认值。例如：整型和浮点型默认值为0，字符串类型为空字符串””，布尔类型为false，切片、函数、指针类型为nil。 变量赋值语法： 1var 变量名 变量类型 = 值 例如： 1234567package mainfunc main(){ var name string = &quot;FiveFeng&quot; var age int = 24 var male bool = true} 类型推导声明变量时Go语言可根据赋值的类型推断变量的类型，从而可以省略类型。 1234567package mainfunc main(){ var name = &quot;FiveFeng&quot; var age = 24 var male = true} 多变量赋值12345package mainfunc main(){ var name, age, male = &quot;Feng&quot;, 24, true} 短变量声明 在函数内部，可以使用 := 对变量进行声明和赋值（不可以在函数外部使用）。 1234567package mainfunc main(){ name := &quot;Feng&quot; age := 24 male := true} 匿名变量 如果有些变量声明后使用不到，可以使用_表示变量名称，即匿名变量。 1234567891011package mainimport &quot;fmt&quot;func getNameAge() (string, int){ return &quot;Feng&quot;, 24}func main(){ name, _ := getNameAge() fmt.Printf(&quot;name: %v\\n&quot;, name)}","link":"/2021/12/12/Go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"},{"title":"Go学习笔记02-常量的声明","text":"常量是编译阶段就确定的值，在程序运行过程中无法改变。 常量的声明1const 常量名 类型 = 值 例如： 1234567891011package mainfunc main(){ const PI float64 = 3.14 const LENGTH = 80 // 可以省略类型 const ( HEIGHT = 80 WIDTH = 30 ) const a, b, c = 16, &quot;Golang&quot;, true // 多重赋值} iota iota是一个特殊常量，可以认为是一个可以被编译器修改的常量。默认开始值是0，const 中每新增一行常量声明将使 iota 计数一次，遇到const关键字是被重置为0。 例如： 1234567891011121314package mainimport &quot;fmt&quot;func main(){ const ( a = iota _ // 1被跳过 b c ) fmt.Printf(&quot;a: %v\\n&quot;,a) fmt.Printf(&quot;b: %v\\n&quot;,b) fmt.Printf(&quot;c: %v\\n&quot;,c)} 运行结果： 123a: 0b: 2c: 3","link":"/2021/12/12/Go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"bedtools","slug":"bedtools","link":"/tags/bedtools/"},{"name":"生物信息","slug":"生物信息","link":"/tags/%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"Golang","slug":"Golang","link":"/tags/Golang/"},{"name":"学习笔记","slug":"学习笔记","link":"/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"categories":[{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"Python入门","slug":"Python/Python入门","link":"/categories/Python/Python%E5%85%A5%E9%97%A8/"},{"name":"生物信息","slug":"生物信息","link":"/categories/%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF/"},{"name":"bedtools","slug":"生物信息/bedtools","link":"/categories/%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF/bedtools/"},{"name":"Golang","slug":"Golang","link":"/categories/Golang/"},{"name":"基础入门","slug":"Golang/基础入门","link":"/categories/Golang/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"}]}